import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {
    ext.kotlinVersion = '1.4.0'
    ext.protobufVersion = '3.13.0'
    ext.protobufGradleVersion = '0.8.12'
    ext.kotlinCoroutinesVersion = '1.3.8'
    ext.ktorVersion = '1.4.0'
    ext.okhttpVersion = '4.8.1'
}

plugins {
    id("org.jetbrains.kotlin.jvm") version "$kotlinVersion"
    id('java-library')
    id("org.jetbrains.dokka") version "0.10.1"
    id('maven-publish')
    id("com.diffplug.gradle.spotless") version "3.27.1"
    id('jacoco')
    id("com.google.protobuf") version "$protobufGradleVersion"
    id('idea')
}

apply from: 'jacoco.gradle'

group = "tech.relaycorp"

repositories {
    jcenter()
}

dependencies {
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))

    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion")

    api('tech.relaycorp:relaynet:1.36.3')

    // Handshake nonce signatures
    implementation("org.bouncycastle:bcpkix-jdk15on:1.66")

    // HTTP + WebSockets handling
    implementation("io.ktor:ktor-client-okhttp:$ktorVersion")
    testImplementation("io.ktor:ktor-client-mock:$ktorVersion")
    testImplementation("io.ktor:ktor-client-mock-jvm:$ktorVersion")
    testImplementation("com.squareup.okhttp3:okhttp:$okhttpVersion")
    testImplementation("com.squareup.okhttp3:mockwebserver:$okhttpVersion")
    testImplementation("com.squareup.okio:okio:2.8.0")
    testImplementation("org.awaitility:awaitility:4.0.3")

    // Protobuf
    implementation("com.google.protobuf:protobuf-gradle-plugin:$protobufGradleVersion")
    implementation("com.google.protobuf:protobuf-java:$protobufVersion")
    implementation("com.google.protobuf:protobuf-java-util:$protobufVersion")

    testImplementation("org.jetbrains.kotlin:kotlin-test")
    testImplementation("org.junit.jupiter:junit-jupiter:5.6.2")
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.6.2")
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")
    testImplementation("com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0")
    testImplementation("org.mockito:mockito-inline:3.5.10")
    testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlinCoroutinesVersion")
}

java {
    withJavadocJar()
    withSourcesJar()
}

kotlin {
    explicitApi = 'strict'
}

tasks.withType(KotlinCompile).all {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:$protobufVersion" }
}

tasks.dokka {
    outputFormat = "html"
    outputDirectory = "$buildDir/docs/api"
}

publishing {
    publications {
        create("default", MavenPublication) {
            from(components["java"])

            pom {
                name.set(rootProject.name)
                description.set("PoWeb JVM library")
                url.set("https://github.com/relaycorp/relaynet-poweb-jvm")
                developers {
                    developer {
                        id.set("relaycorp")
                        name.set("Relaycorp, Inc.")
                        email.set("no-reply@relaycorp.tech")
                    }
                }
                licenses {
                    license {
                        name.set("Apache-2.0")
                    }
                }
                scm {
                    connection.set("scm:git:https://github.com/relaycorp/relaynet-poweb-jvm.git")
                    developerConnection.set(
                            "scm:git:https://github.com/relaycorp/relaynet-poweb-jvm.git"
                    )
                    url.set("https://github.com/relaycorp/relaynet-poweb-jvm")
                }
            }
        }
    }
    repositories {
        maven {
            // publish=1 automatically publishes the version
            url = uri(
                    "https://api.bintray.com/maven/relaycorp/maven/tech.relaycorp.poweb/;publish=1"
            )
            credentials {
                username = System.getenv("BINTRAY_USERNAME")
                password = System.getenv("BINTRAY_KEY")
            }
        }
    }
}

spotless {
    def ktlintUserData = [
            "max_line_length": "100",
            "disabled_rules" : "import-ordering"
    ]
    kotlin {
        ktlint("0.36.0").userData(ktlintUserData)
    }
    kotlinGradle {
        ktlint().userData(ktlintUserData)
    }
}

// Workaround for https://github.com/google/protobuf-gradle-plugin/issues/391
configurations {
    "compileProtoPath" {
        attributes {
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, "java-runtime"))
        }
    }
    "testCompileProtoPath" {
        attributes {
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, "java-runtime"))
        }
    }
}

gradleEnterprise {
    buildScan {
        termsOfServiceUrl = "https://gradle.com/terms-of-service"
        termsOfServiceAgree = "yes"
    }
}
